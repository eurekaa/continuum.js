{
    "input": {
        "path": "."
    },
    
    "output": {
        "path": "."
    },
    
    "cache": {
        "enabled": true,
        "path": ".",
        "extension": "cache"
    },
    
    "source_map": {
        "enabled": true,
        "path": ".",
        "extension": "map"
    },
    
    "log": {
        "enabled": true,
        "path": ".",
        "name": "continuum",
        "extension": "log",
        "levels": { // [ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF]
            "console": "DEBUG",
            "file": "ALL"
        }
    },
    
    "compilation": {
        "enabled": true,
        "compilers": {
            "coffee-script": {
                "input_extension": "coffee",
                "output_extension": "js",
                "options": {}
            },
            "livescript": {
                "input_extension": "ls",
                "output_extension": "js",
                "options": {}
            },
            "sass": {
                "input_extension": ["sass", "scss"],
                "output_extension": "css",
                "options": { // https://www.npmjs.org/package/node-sass
                    "includePaths": [], // paths to include to resolve @imports.
                    "imagePath": "", // image path to prepend when you use image-url() function.
                    "outputStyle": "nested", // nested || compressed
                    "precision": null // decimals count.
                }
            },
            "stylus": {
                "input_extension": ["styl", "stylus"],
                "output_extension": "css",
                "options": {
                    "compress": false,
                    "linenos": true
                }
            },
            "less": {
                "input_extension": "less",
                "output_extension": "css",
                "options": {}
            },
            "jade": {
                "input_extension": "jade",
                "output_extension": "html",
                "options": {
                    "pretty": true
                }
            }
        }
    },
    
    "transformation": {
        "enabled": true,
        "lazy_marker": "!!",
        "strict_marker": "!!!",
        "lazy_safe_marker": "$back",
        "strict_safe_marker": "$throw"
    },
    
    "analysis": {
        "enabled": true,
        
        "js": { // http://jshint.com/docs/options/
                
            // DIRECTIVES:
            "predef": [], // {array} a list of global vars jshint do not warn about.
            "maxerr": 50, // {int} allows you to set the maximum amount of warnings JSHint will produce before giving up.
            "indent": 4, //  {int} sets a specific tab width for your code.
            "moz": false, // tells JSHint that your code uses Mozilla JavaScript extensions.
            "es3": false, // tells JSHint that your code needs to adhere to ECMAScript 3 specification.
            "es5": false, // tells JSHint that your code needs to adhere to ECMAScript 5 specification.
            "esnext": false, // tells JSHint that your code uses ECMAScript 6 specific syntax.
            
            // ENFORCING RULES:
            /* When set to true, these options will make JSHint 
            produce more warnings about your code. */
            "bitwise": true, // prohibits the use of bitwise operators such as '|' or '&'.
            "camelcase": false, // force all variable names to use either camelCase style or UPPER_CASE with underscores.
            "curly": false, // always put curly braces around blocks in loops and conditionals. 
            "eqeqeq": true, // prohibits the use of == and != in favor of === and !==. 
            "forin": true, // requires all for in loops to filter object's items.
            "freeze": true, // prohibits overwriting prototypes of native objects.
            "immed": false, // prohibits the use of immediate function invocations without wrapping them in parentheses.
            "latedef": false, //  prohibits the use of a variable before it was defined.
            "newcap": false, // requires you to capitalize names of constructor functions.
            "noarg": true, // prohibits the use of arguments.caller and arguments.callee.
            "noempty": true, // warns when you have an empty block in your code.
            "nonbsp": true, // warns about "non-breaking whitespace" characters.
            "nonew": false, // prohibits the use of constructor functions for side-effects. 
            "plusplus": false, // prohibits the use of unary increment and decrement operators (++, --).
            "quotmark": false, // enforces the consistency of quotation marks used throughout your code. [true|false, 'single', 'double']
            "undef": true, // prohibits the use of explicitly undeclared variables.
            "unused": true, // warns when you define and never use your variables.
            "strict": false, // requires all functions to run in ECMAScript 5's strict mode.
            "maxparams": false, // {int} lets you set the max number of formal parameters allowed per function.
            "maxdepth": false, // {int} lets you control how nested do you want your blocks to be.
            "maxstatements": false, // {int} lets you set the max number of statements allowed per function
            "maxcomplexity": false, // {int} lets you control cyclomatic complexity throughout your code.
            "maxlen": false, // {int} lets you set the maximum length of a line.
            
            // RELAXING RULES:
            /* When set to true, these options will make JSHint 
            produce less warnings about your code. */
            "asi": false, // tolerate missing semicolons.
            "boss": false, // tolerate use of assignments in cases where comparisons are expected.
            "debug": false, // tolerate debugger statements in your code.
            "eqnull": false, // tolerate == null comparisons.
            "evil": false, // tolerate use of eval.
            "expr": false, // tolerate use of expressions where normally you would expect to see assignments or function calls.
            "funcscope": false, // tolerate declaring variables inside of control structures while accessing them later from the outside.
            "globalstrict": false, // tolerate use of global strict mode. 
            "iterator": false, // tolerate __iterator__ property.
            "lastsemic": false, // tolerate missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block.
            "laxbreak": false, // tolerate possibly unsafe line breakings in your code.
            "laxcomma": false, // tolerate comma-first coding style.
            "loopfunc": false, // tolerate functions inside of loops.
            "multistr": false, // tolerate multi-line strings.
            "notypeof": false, // tolerate invalid typeof operator values.
            "proto": false, // tolerate __proto__ property.
            "scripturl": false, // tolerate use of script-targeted URLsâ€”such as javascript:... .
            "shadow": false, // tolerate variable shadowing.
            "sub": false, // tolerate using [] notation when it can be expressed in dot notation.
            "supernew": false, // tolerate "weird" constructions like new function () { ... }.
            "validthis": false, // tolerate possible strict violations when the code is running in strict mode and you use this in a non-constructor function.
            "noyield": false, // tolerate generator functions with no yield statement in them.
            
            // ENVIRONMENT RULES:
            /* These options let JSHint know about some pre-defined global variables. */
            "browser": true, // defines globals exposed by modern browsers.
            "browserify": false, // defines globals exposed by browserify (nodejs code in browser).
            "couch": false, // defines globals exposed by CouchDB.
            "devel": true, // defines globals that are usually used for debugging: console, alert, etc.
            "dojo": false, // defines globals exposed by the Dojo Toolkit.
            "jasmine": false, // defines globals exposed by the Jasmine library.
            "jquery": false, // defines globals exposed by the jQuery JavaScript library.
            "mocha": false, // defines globals exposed by the Mocha JavaScript testing framework.
            "mootools": false, // defines globals exposed by the MooTools JavaScript framework.
            "node": true, // defines globals available when your code is running inside of the Node runtime environment.
            "nonstandard": false, // defines non-standard but widely adopted globals such as escape and unescape.
            "phantom": false, // defines globals available when your core is running inside of the PhantomJS runtime environment.
            "prototypejs": false, // defines globals exposed by the Prototype JavaScript framework.
            "qunit": false, // defines globals exposed by Qunit.
            "rhino": false, // defines globals available when your code is running inside of the Rhino runtime environment.
            "shelljs": false, // defines globals exposed by Shelljs.
            "worker": false, // defines globals available when your code is running inside of a Web Worker.
            "wsh": false, // defines globals available when your code is running as a script for the Windows Script Host.
            "yui": false // defines globals exposed by the YUI JavaScript framework. 
        }, 
        
        "css": { // https://github.com/CSSLint/csslint/wiki/Rules
                
            // POSSIBLE ERRORS:
            /* The following rules point out potential errors in your CSS. */
            "box-model": true, // Beware of box model size.
            "display-property-grouping": true, // Require properties appropriate for display.
            "duplicate-properties": true, // Disallow duplicate properties.
            "empty-rules": true, // Disallow empty rules.
            "known-properties": true, // Require use of known properties.
            
            // COMPATIBILITY:
            /* The following rules flag for compatibility problems 
            across browsers and browser settings. */
            "adjoining-classes": true, // Disallow adjoining classes.
            "box-sizing": true, // Disallow box-sizing.
            "compatible-vendor-prefixes": true, // Require compatible vendor prefixes
            "gradients": true, // Require all gradient definitions.
            "text-indent": true, // Disallow negative text-indent.
            "vendor-prefix": true, // Require standard property with vendor prefix.
            "fallback-colors": true, // Require fallback colors.
            "star-property-hack": true, // Disallow star hack.
            "underscore-property-hack": true, // Disallow underscore hack.
            "bulletproof-font-face": true, // Bulletproof font-face.
            
            // PERFORMANCE:
            /* The following rules are aimed at improving CSS performance, 
            including runtime performance and overall code size. */
            "font-faces": true, // Don't use too many web fonts.
            "import": true, // Disallow @import.
            "regex-selectors": true, // Disallow selectors that look like regular expressions.
            "universal-selector": true, // Disallow universal selector.
            "unqualified-attributes": true, // Disallow unqualified attribute selectors.
            "zero-units": true, // Disallow units for zero values.
            "overqualified-elements": true, // Disallow overqualified elements.
            "shorthand": true, // Require shorthand properties.
            "duplicate-background-images": true, // Disallow duplicate background images.
            
            // MAINTENABILITY AND DUPLICATION:
            /* These rules help to ensure your code is readable and maintainable by others. */
            "floats": true, // Disallow too many floats.
            "font-sizes": true, // Don't use too many font-size declarations.
            "ids": true, // Disallow IDs in selectors.
            "important": true, // Disallow !important.
            
            // ACCESSIBILITY:
            /* These rules are designed to pick out possible accessibility issues. */
            "outline-none": true, // Disallow outline: none.
            
            // OOCSS:
            /* These rules are based on the principles of Object-Oriented CSS */
            "qualified-headings": true, // Disallow qualified headings.
            "unique-headings": true // Headings should only be defined once.
        },
        
        "html": {},
        "htm": {}
    },
    
    "compression": {
        "enabled": true,
        "js": {
            "options": {}
        }
    },
    
    "packaging": {}
}
