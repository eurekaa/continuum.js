// Generated by CoffeeScript 1.7.1
(function() {
  var api, async, continuum, examples, expect, fs, fs_tools, js_test, languages, options, path, _;

  js_test = require('jstest');

  expect = require('chai').expect;

  fs = require('fs');

  fs_tools = require('fs-tools');

  path = require('path');

  _ = require('lodash');

  async = require('async');

  continuum = require('../continuum.js');

  api = require('../api.js');

  examples = require('./examples.js');

  options = continuum.setup(examples.options);

  languages = ['coffeescript', 'livescript', 'javascript'];

  js_test.Test.describe('api.js', function() {
    this.describe('.compile()', function() {

      /*
      @.it 'compiles coffescript files.', ->
         for example in _.keys examples when examples[example].extension is '.coffee'
            expect(fs.existsSync(options.output.path + '/' + example + '.js')).to.be.true
      
      @.it 'compiles livescript files.', ->
         for example in _.keys examples when examples[example].extension is '.ls'
            expect(fs.existsSync(options.output.path + '/' + example + '.js')).to.be.true
      
      @.it 'skips compilation for plain javascript files.', ->
         for example in _.keys examples when examples[example].extension is '.js'
            expect(fs.existsSync(options.output.path + '/' + example + '.js')).to.be.true
      
      @.it 'compiles less files.', ->
         for example in _.keys examples when examples[example].extension is '.less'
            expect(fs.existsSync(options.output.path + '/' + example + '.css')).to.be.true
      
      @.it 'compiles stylus files.', ->
         for example in _.keys examples when examples[example].extension is '.stylus'
            expect(fs.existsSync(options.output.path + '/' + example + '.css')).to.be.true
      
      @.it 'compiles jade files.', ->
         for example in _.keys examples when examples[example].extension is '.jade'
            expect(fs.existsSync(options.output.path + '/' + example + '.html')).to.be.true
      
      @.it 'skips compilation for non compilable files.', ->
         for example in _.keys examples when examples[example].extension is '.txt'
            expect(fs.existsSync(options.output.path + '/' + example + '.txt')).to.be.true
       */
    });
    return this.describe('.transform()', function() {
      this.it('performs cps transformation correctly.', function(done) {
        return async.each(languages, function(language, next) {
          var test;
          expect(fs.existsSync('./' + options.output.path + '/scripts/' + language + '/cps.js')).to.be["true"];
          test = require('./' + options.output.path + '/scripts/' + language + '/cps.js');
          return test.test(function(err, result) {
            expect(err).to.be["null"];
            expect(result).to.be["true"];
            return next();
          });
        }, done);
      });
      return this.it('leaves the code as it is when cps is not used.', function(done) {
        return async.each(languages, function(language, next) {
          var test;
          expect(fs.existsSync('./' + options.output.path + '/scripts/' + language + '/cps_none.js')).to.be["true"];
          test = require('./' + options.output.path + '/scripts/' + language + '/cps_none.js');
          return test.test(function(err, result) {
            expect(err).to.be["null"];
            expect(result).to.be["true"];
            return next();
          });
        }, done);
      });
    });
  });

}).call(this);

//# sourceMappingURL=api.map
