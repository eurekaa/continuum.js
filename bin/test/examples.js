// Generated by CoffeeScript 1.7.1
(function() {
  var fs;

  fs = require('fs');

  exports['options'] = {
    input: {
      path: 'examples/src'
    },
    output: {
      path: 'examples/bin'
    },
    source_map: {
      enabled: true,
      path: 'examples/map'
    },
    cache: {
      enabled: true,
      path: 'examples/cache'
    },
    log: {
      enabled: true,
      path: 'examples/log',
      name: 'test',
      levels: {
        console: 'ALL',
        file: 'OFF'
      }
    },
    transformation: {
      enabled: true,
      explicit: true
    }
  };

  exports['media/images/logo'] = {
    extension: '.jpg',
    encoding: 'base64',
    content: fs.readFileSync('../media/images/logo.jpg', 'base64')
  };

  exports['media/images/logo2'] = {
    extension: '.png',
    encoding: 'base64',
    content: fs.readFileSync('../media/images/logo.png', 'base64')
  };

  exports['media/images/logo3'] = {
    extension: '.gif',
    encoding: 'base64',
    content: fs.readFileSync('../media/images/logo.gif', 'base64')
  };

  exports['media/images/logo4'] = {
    extension: '.tif',
    encoding: 'base64',
    content: fs.readFileSync('../media/images/logo.tif', 'base64')
  };

  exports['scripts/coffeescript/cps'] = {
    extension: '.coffee',
    encoding: 'utf8',
    content: "test = (test, !!!)-> typeof test is 'string'\nexports['test'] = (!!)->\n   result = test 'test', !!\n   return result\nresult = @.test !!!  \nreturn result.value"
  };

  exports['scripts/coffeescript/cps_none'] = {
    extension: '.coffee',
    encoding: 'utf8',
    content: "test = (test, callback)-> callback null, (typeof test is 'string')\nexports['test'] = (callback)->\n   test 'test', (err, result)->\n      callback err, result"
  };

  exports['scripts/livescript/cps'] = {
    extension: '.ls',
    encoding: 'utf8',
    content: "test = (test, !!)-> return typeof test is 'string'\nexports['test'] = (!!)->\n   result = test 'test', !!\n   return result"
  };

  exports['scripts/livescript/cps_none'] = {
    extension: '.ls',
    encoding: 'utf8',
    content: "test = (test, callback)-> callback null, (typeof test is 'string')\nexports['test'] = (callback)->\n   test 'test', (err, result)->\n      callback err, result"
  };

  exports['scripts/javascript/cps'] = {
    extension: '.js',
    encoding: 'utf8',
    content: "var test = function(test, !!){\n   return (typeof test === 'string');\n};\nexports['test'] = function(!!){\n   result = test('test', !!);\n   return result;\n};"
  };

  exports['scripts/javascript/cps_none'] = {
    extension: '.js',
    encoding: 'utf8',
    content: "var test = function(test, callback){\n   callback(null, (typeof test === 'string'));\n};\nexports['test'] = function(callback){\n   test('test', function(err, result){\n      callback(err, result);\n   });\n};"
  };

  exports['pages/jade/page'] = {
    extension: '.jade',
    encoding: 'utf8',
    content: "doctype\nhtml\n   head\n      title test continuum.js\n   body\n      #test a jade test page.\n      footer"
  };

  exports['styles/less/test'] = {
    extension: '.less',
    encoding: 'utf8',
    content: "@base: #f938ab;\n.box-shadow(@style, @c) when (iscolor(@c)) {\n   -webkit-box-shadow: @style @c;\n   box-shadow:         @style @c;\n}\n.box-shadow(@style, @alpha: 50%) when (isnumber(@alpha)) {\n   .box-shadow(@style, rgba(0, 0, 0, @alpha));\n}\n.box {\n   color: saturate(@base, 5%);\n   border-color: lighten(@base, 30%);\n   div { .box-shadow(0 0 5px, 30%) }\n}"
  };

  exports['styles/stylus/test'] = {
    extension: '.styl',
    encoding: 'utf8',
    content: "border-radius()\n   -webkit-border-radius: arguments\n   -moz-border-radius: arguments\n   border-radius: arguments\n\nbody a\n   font: 12px/1.4 \"Lucida Grande\", Arial, sans-serif\n   background: black\n   color: #ccc\n\nform input\n   padding: 5px\n   border: 1px solid\n   border-radius: 5px"
  };

  exports['styles/sass/test_sass'] = {
    extension: '.sass',
    encoding: 'utf8',
    content: ".message\n   border: 1px solid #ccc\n   padding: 10px\n   color: #333\n\n.success\n   @extend .message\n   borderColor: green\n\n.error\n   @extend .message\n   border-color: red\n\n.warning\n   @extend .message\n   border-color: yellow"
  };

  exports['styles/sass/test_scss'] = {
    extension: '.scss',
    encoding: 'utf8',
    content: ".message {\n   border: 1px solid #ccc;\n   padding: 10px;\n   color: #333;\n}\n\n.success {\n   @extend .message;\n   border-color: green;\n}\n\n.error {\n   @extend .message;\n   border-color: red;\n}\n\n.warning {\n   @extend .message;\n   border-color: yellow;\n}"
  };

  exports['styles/test'] = {
    extension: '.css',
    encoding: 'utf8',
    content: ".box {\n   color: #fe33ac;\n   border-color: #fdcdea;\n}\n.box div {\n   -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\n   box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\n}"
  };

  exports['media/not_compilable'] = {
    extension: '.txt',
    encoding: 'utf8',
    content: "this is a non compilable test file."
  };

}).call(this);

//# sourceMappingURL=examples.map
